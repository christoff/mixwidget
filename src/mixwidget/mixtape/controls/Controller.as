/* The contents of this file are subject to the Common Public Attribution * License Version 1.0. (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://mixwidget.org/license-full. The License is based on the Mozilla Public * License Version 1.1, but Sections 14 and 15 have been added to cover use of * software over a computer network and provide for limited attribution for the * Original Developer. In addition, Exhibit A has been modified to be consistent * with Exhibit B. *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for * the specific language governing rights and limitations under the License. *  * The Original Code is Mixwidget.org. *  * The Original Developers are Michael Christoff & Radley Marx.  The Initial  * Developers of the Original Code are Michael Christoff & Radley Marx. */ package mixwidget.mixtape.controls{	import fl.transitions.Tween;	import fl.transitions.easing.*;		import flash.display.MovieClip;	import flash.display.SimpleButton;	import flash.events.ContextMenuEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;	import flash.ui.ContextMenu;	import flash.ui.ContextMenuItem;		import mixwidget.mixtape.events.MixtapeEvent;	import mixwidget.media.AudioEvent;	import mixwidget.media.AudioStatus;	import mixwidget.media.FlashAudioPlayer;	import mixwidget.util.Util;			public class Controller extends MovieClip	{		//XSPF namespace stuff    namespace xspf = "http://xspf.org/ns/0/";    use namespace xspf;				// Variables		private var shell:MovieClip;		private var player:FlashAudioPlayer;				private var playlist_xml:XML;				private var mwContextMenu:ContextMenu;				public var pauseBtn:SimpleButton;		public var playBtn:SimpleButton;		public var prevBtn:SimpleButton;		public var nextBtn:SimpleButton;				public var background:MovieClip;						public var volumeControl:MovieClip;		public var scrubber:MovieClip;						public var flipBtn:SimpleButton;		public var fullBtn:SimpleButton;		public var normBtn:SimpleButton;		public var makeaMix:SimpleButton;		public var menuBtn:SimpleButton;		public var linkBack:SimpleButton;		public var soundBtn:SimpleButton;		public var volSlideReturnBtn:SimpleButton;				private var tween:Tween; 				public var time_txt:TextField;		public var position_txt:TextField;		public var title_txt:TextField;		public var artist_txt:TextField;		public var count_txt:TextField;				private var autoplay:String;				private var sWidth:Number;		private var sHeight:Number;				public var volBtn:MovieClip;		public var scrubberBtn:MovieClip;		//private var shell:MovieClip;		private var _currentTrack:Number = 1;		private var prevDuration:Number = -1;		private var _currentPosition:Number;		private var _length:Number;		private var _bytesLoaded:Number;		private var _bytesTotal:Number;				private var _firstLoad:Boolean = true;				public var template:*;				// Constructor				public function Controller()		{ 		  Util.d("Controller()");		}				public function init(mc:MovieClip, player:FlashAudioPlayer, playlistXml:XML, sw:Number, sh:Number):void		{			Util.d("Controller.init()");						this.playlist_xml = playlistXml;						//Settings.init();			sWidth 	= sw;			sHeight = sh;			shell		= mc;						shell.addEventListener(MixtapeEvent.INIT_LOAD_COMPLETE, onMixtapeLoadComplete);						scrubber.progBar.width = 0;			scrubber.loadBar.width = 0;						volSlideReturnBtn.visible = false;						initPlayer(player);		}						public function onMixtapeLoadComplete(event:Event):void		{			Util.d("Controller.onShellComplete()");							// load playlist			// this.player.loadTracks(this.playlist_xml.trackList.track);						// change count      count_txt.text  = _currentTrack + " / " + this.player.tracks.length();						// remove listener			shell.removeEventListener(MixtapeEvent.INIT_LOAD_COMPLETE, onMixtapeLoadComplete);						// update context menu			// updateContextMenu();						_firstLoad = false;	 }			  public function initPlayer(p:FlashAudioPlayer):void	  {			Util.d('Cotroller:initPlayer');			this.player = p;			      this.player.initButtons(playBtn, pauseBtn, prevBtn, nextBtn);      this.player.initScrubber(scrubber, time_txt);      this.player.initVolumeControl(volumeControl, soundBtn);            //setup listeners      this.player.addEventListener(AudioEvent.PLAYING, handlePlay);      this.player.addEventListener(AudioEvent.PAUSED, handlePause);			this.player.addEventListener(AudioEvent.STOPPED, handlePause);      this.player.addEventListener(AudioEvent.RESUMING, handleResume);      this.player.addEventListener(AudioEvent.STATUS, updateDisplay);			      //this.player.addEventListener(AudioEvent.STATUS, updateScrubber);      this.player.addEventListener(AudioEvent.DEAD_TRACK, handleDeadTrack);      this.player.addEventListener(AudioEvent.NEXT_TRACK, resetScrubber);      this.player.addEventListener(AudioEvent.PREV_TRACK, resetScrubber);						this.player.addEventListener(AudioEvent.SCRUB_START, handleScrubStart);			this.player.addEventListener(AudioEvent.SCRUB_FINISH, handleScrubFinish);      menuBtn.addEventListener(MouseEvent.MOUSE_DOWN, onMenuSelect);      //linkBack.addEventListener(MouseEvent.CLICK, onLinkBack);			hideVolSlider();				  }				public function enableVolumeRollover():void		{			soundBtn.addEventListener(MouseEvent.MOUSE_OVER, onSoundMouseOver);			volSlideReturnBtn.addEventListener(MouseEvent.MOUSE_OVER, onVolSlideReturnBtnMouseOver);		}				public function disableVolumeRollover():void		{			soundBtn.removeEventListener(MouseEvent.MOUSE_OVER, onSoundMouseOver);			volSlideReturnBtn.removeEventListener(MouseEvent.MOUSE_OVER, onVolSlideReturnBtnMouseOver);		}				private function handleScrubStart(event:AudioEvent = null):void		{			//		}				private function handleScrubFinish(event:AudioEvent = null):void		{			//		}				private function onSoundMouseOver(event:MouseEvent):void		{			showVolSlider();		}				private function onVolSlideReturnBtnMouseOver(event:MouseEvent):void		{			hideVolSlider();		}				public function hideVolSlider():void		{			tween = new Tween(volumeControl, "y", Regular.easeOut, volumeControl.y, 60, 0.25, true);			volSlideReturnBtn.visible = false;			volSlideReturnBtn.enabled = false;			soundBtn.addEventListener(MouseEvent.MOUSE_OVER, onSoundMouseOver);		}				private function showVolSlider():void		{			tween = new Tween(volumeControl, "y", Regular.easeOut, volumeControl.y, 12, 0.25, true);			volSlideReturnBtn.visible = true;			volSlideReturnBtn.enabled = true;			soundBtn.removeEventListener(MouseEvent.MOUSE_OVER, onSoundMouseOver);		}		private function onMakeaMix(event:MouseEvent):void		{			handleMakeAMix();		}				private function handleMakeAMix():void		{			// navigateToURL(new URLRequest(WidgetConfig.env.ROOT + "create?refer=mixtape"), "_blank");		}				private function onMenuSelect(event:MouseEvent):void		{			handleMenuSelect();		}				private function handleMenuSelect():void // needed from the ContextMenu		{			Util.d("handleMenuSelect()");			//this.player.onPause();			//shell.addEventListener("shellLoadComplete", onShellComplete);		}				private function onLinkBack(event:MouseEvent):void		{			handleLinkBack();		}				private function handleLinkBack():void		{			// navigateToURL(new URLRequest(WidgetConfig.env.ROOT), "_blank");		}				public function handlePlay(event:AudioEvent = null):void		{		   //enable controls		   this.enablePrevNext();		   pauseBtn.visible = true;       playBtn.visible = false;		}				public function handlePause(event:AudioEvent = null):void		{		   pauseBtn.visible = false;       playBtn.visible = true;		}				private function handleResume(event:AudioEvent):void		{		   pauseBtn.visible = true;       playBtn.visible = false;		}		//		private function updateContextMenu():void {//			//			mwContextMenu = new ContextMenu();//			mwContextMenu.hideBuiltInItems();//			//			//			var titleItem:ContextMenuItem = new ContextMenuItem(Settings.widgetXML.title);//			var creatorItem:ContextMenuItem = new ContextMenuItem("by " + Settings.widgetXML.creator);//			//			var seeMoreItem:ContextMenuItem = new ContextMenuItem("find more mixes by " +Settings.widgetXML.creator + "...");//			seeMoreItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, handleMenuSelect);//			//			var makeAMixItem:ContextMenuItem = new ContextMenuItem("make a mix...");//			makeAMixItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, handleMakeAMix);//			//			//var linkBackItem:ContextMenuItem = new ContextMenuItem("Mixwit homepage...");//			//linkBackItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, handleLinkBack);//			//			seeMoreItem.separatorBefore = true;//			//makeAMixItem.separatorBefore = true;//			//			mwContextMenu.customItems.push(titleItem, creatorItem, seeMoreItem, makeAMixItem);//			mwContextMenu.customItems[0].enabled = false;//			mwContextMenu.customItems[1].enabled = false;//			//			shell.contextMenu = mwContextMenu;//		}						private function updateDisplay(event:AudioEvent):void		{		  var status:AudioStatus = event.status;			count_txt.text  = status.currentTrackNum + 1 + " / " + status.totalTracks;						/*			var duration:String = status.formattedDuration;			if (prevDuration != -1 && Math.abs(prevDuration - status.duration) < 10000){				duration = DateFormat.formatMilliseconds(prevDuration);			}else{				prevDuration = status.duration;			} 			*/			updateScrubber(event);			time_txt.text   = status.formattedPosition + " / " + status.formattedDuration;      title_txt.text  = event.track.title +" by " + event.track.creator;		}				private function handleDeadTrack(event:AudioEvent):void    {      //artist_txt.text  = "";      title_txt.text = "Sorry, problem playing track.";    }				private function updateScrubber(event:AudioEvent):void    {      var status:AudioStatus = event.status;						if(!this.player.isScrubbing){								if (status.duration > 0)				{					scrubber.btn.x = (status.position/status.duration * (scrubber.border.width - scrubber.btn.width)) + (scrubber.btn.width/2);				}				else {scrubber.btn.x = (scrubber.btn.width / 2); };      }      scrubber.progBar.width = scrubber.btn.x;      scrubber.loadBar.width = Math.min(scrubber.border.width - 2, (status.bytesLoaded/status.bytesTotal) * (scrubber.border.width));    }        private function resetScrubber(event:AudioEvent = null):void    {      scrubber.btn.x = Math.round(scrubber.btn.width / 2);      scrubber.progBar.width = 0;      scrubber.loadBar.width = 0;    }				private function disablePrevNext():void		{		  prevBtn.enabled = false;      nextBtn.enabled = false;      prevBtn.alpha = .5;      nextBtn.alpha = .5;		}				private function enablePrevNext():void		{		  prevBtn.enabled = true;      nextBtn.enabled = true;      prevBtn.alpha = 1;      nextBtn.alpha = 1;		}	}}