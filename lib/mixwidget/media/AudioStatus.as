/* The contents of this file are subject to the Common Public Attribution * License Version 1.0. (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://mixwidget.org/license-full. The License is based on the Mozilla Public * License Version 1.1, but Sections 14 and 15 have been added to cover use of * software over a computer network and provide for limited attribution for the * Original Developer. In addition, Exhibit A has been modified to be consistent * with Exhibit B. *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for * the specific language governing rights and limitations under the License. *  * The Original Code is Mixwidget.org. *  * The Original Developers are Michael Christoff & Radley Marx.  The Initial  * Developers of the Original Code are Michael Christoff & Radley Marx. */package mixwidget.media{  import mixwidget.util.DateFormat;    public class AudioStatus  {    public var position:Number;    public var length:Number;    public var bytesLoaded:Number;    public var bytesTotal:Number;    public var currentTrackNum:uint;    public var totalTracks:uint;        public function get percentComplete():Number 		{ return (bytesTotal != 0) ? Math.round(100 * (position / duration)) : 0; }		    public function get duration():Number 					{ return (bytesTotal != 0) ? Math.round(length * bytesTotal / bytesLoaded) : 0; }    public function get timeLeft():Number 					{ return duration - position; }    public function get formattedPosition():String 	{ return DateFormat.formatMilliseconds(this.position); }    public function get formattedTimeLeft():String 	{ return DateFormat.formatMilliseconds(this.timeLeft); }				public function get formattedDuration():String 	{						if (bytesLoaded == bytesTotal && bytesLoaded > 0) { return DateFormat.formatMilliseconds(this.duration); }			else																							{ return "(" + DateFormat.formatMilliseconds(this.duration) + ")"; };		}        public function AudioStatus(position:Number, length:Number, bytesLoaded:Number,                                 bytesTotal:Number, currentTrackNum:uint, totalTracks:uint)    {       this.position = position;       this.length = length;       this.bytesLoaded = bytesLoaded;       this.bytesTotal = bytesTotal;       this.currentTrackNum = currentTrackNum;       this.totalTracks = totalTracks;    }        public function copy():AudioStatus		{      return new AudioStatus(position, length, bytesLoaded, bytesTotal, currentTrackNum, totalTracks);    }        public function toString():String{      return "[pos: " + position + "] [len: " + length + "] [bl: " + bytesLoaded + "] [bt: " +  bytesTotal +              " [ " + percentComplete + "%] [dur: " + duration + "]";                 }  }}