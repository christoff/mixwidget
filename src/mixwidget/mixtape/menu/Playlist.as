/* The contents of this file are subject to the Common Public Attribution * License Version 1.0. (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://mixwidget.com/license. The License is based on the Mozilla Public * License Version 1.1, but Sections 14 and 15 have been added to cover use of * software over a computer network and provide for limited attribution for the * Original Developer. In addition, Exhibit A has been modified to be consistent * with Exhibit B. *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for * the specific language governing rights and limitations under the License. *  * The Original Code is Mixwidget. *  * The Original Developers are Michael Christoff & Radley Marx.  The Initial  * Developers of the Original Code are Michael Christoff & Radley Marx. */package mixwidget.mixtape.menu{	  import flash.display.MovieClip;  import flash.events.MouseEvent;    import mixwidget.media.AudioEvent;  import mixwidget.media.FlashAudioPlayer;  import mixwidget.util.Util;  import mixwidget.mixtape.menu.AudioListItem;  import mixwidget.mixtape.menu.VerticalList;    public class Playlist extends MovieClip    {    	//XSPF namespace stuff      namespace xspf = "http://xspf.org/ns/0/";      use namespace xspf; 						public var scrollbar:MovieClip;			public var content:MovieClip;						private const ITEM_HEIGHT:Number = 24;						private var _selectedTrack:Number;						public var list:VerticalList;						private var player:FlashAudioPlayer;						public function Playlist(player:FlashAudioPlayer)			{										// add list				list = new VerticalList();				list.init(ITEM_HEIGHT);				this.addChild(list);							  // set xml			  this.player = player;			}						public function init():void			{				createList();								this.player.addEventListener(AudioEvent.NEXT_TRACK, showCurrentTrack);        this.player.addEventListener(AudioEvent.PREV_TRACK, showCurrentTrack);				this.player.addEventListener(AudioEvent.PLAYING, showCurrentTrack);				this.player.addEventListener(AudioEvent.RESUMING, showCurrentTrack);			}						public function showCurrentTrack(event:AudioEvent=null):void			{				Util.d();				if (list.content.numChildren != 0) {									var tracks:XMLList 	= this.player.tracks;					var count:Number 		= tracks.length();					// highlight track					for (var i:int = 0; i < count; i++)					{						var item:AudioListItem = list.content.getChildAt(i) as AudioListItem;												if (i == this.player.currentTrackNum) { item.active = true; }						else { item.active = false; };					}										Util.d("player.currentTrackNum = " + this.player.currentTrackNum, 1);					list.current = this.player.currentTrackNum;				}			}						private function createList():void			{				Util.d();								var tracks:XMLList = this.player.tracks;				var longList:Boolean;				var count:Number = tracks.length();								Util.d("count = " + count, 1);								(count > (list.maxHeight/ITEM_HEIGHT)) ? longList = true : longList = false;				for (var i:int = 0; i < count; i++)				{					var item:MovieClip = new AudioListItem();										item.y 		= ITEM_HEIGHT * i;					item.name	= "item"+i.toString();					item.id 	= i;										item.config(XML(tracks[i]), i, longList);					item.mouseChildren = false;					item.addEventListener(MouseEvent.CLICK, onMouseClick);					list.content.addChild(item);								}				list.config(count);								showCurrentTrack();			}						private function onMouseClick(event:MouseEvent):void			{         this.player.play(event.target.id);			}						public function get selectedTrack():Number			{				return _selectedTrack;			}	}}