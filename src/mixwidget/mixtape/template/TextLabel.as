package mixwidget.mixtape.template {	
	import flash.display.MovieClip;
	/* The contents of this file are subject to the Common Public Attribution * License Version 1.0. (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://mixwidget.org/license-full. The License is based on the Mozilla Public * License Version 1.1, but Sections 14 and 15 have been added to cover use of * software over a computer network and provide for limited attribution for the * Original Developer. In addition, Exhibit A has been modified to be consistent * with Exhibit B. *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for * the specific language governing rights and limitations under the License. *  * The Original Code is Mixwidget.org. *  * The Original Developers are Michael Christoff & Radley Marx.  The Initial  * Developers of the Original Code are Michael Christoff & Radley Marx. */		import flash.display.Sprite;
	import flash.geom.ColorTransform;
	import flash.text.AntiAliasType;
	import flash.text.TextField;
	import flash.text.TextFieldType;
	import flash.text.TextFormat;
	import flash.text.TextFormatAlign;		public class TextLabel extends MovieClip	{      				private var _format:TextFormat = new TextFormat();		private var _myColor:ColorTransform;				public var txt:TextField;		public var bg:Sprite;				public function TextLabel()		{			txt  			= new TextField();			txt.type 	= TextFieldType.DYNAMIC;			txt.selectable 	= false;			this.addChild(txt);			//txt.y = bg.y + 1;			_myColor = new ColorTransform();		}				public function configFormat(src:XMLList):void		{			_format.font  = "Splurge";  			_format.color = Number("0x" + src.@color);						if (src.@size > 8 && src.@size < 100) { /**/ }			else																	{ src.@size = 18; }; 									_format.size = src.@size;  						src.@align = String(src.@align).toUpperCase();						if (src.@align == "") { src.@align = "CENTER"; };					  _format.align 	= TextFormatAlign[String(src.@align)]; 			txt.height 			= Math.round(Number(src.@size) + (Number(src.@size) / 1.5));			bg.height				= Math.round(Number(src.@size) + (Number(src.@size) / 1.5));			bg.y						= txt.y;			txt.embedFonts  = true;						txt.antiAliasType        = AntiAliasType.ADVANCED;			txt.defaultTextFormat    = _format;			_myColor.color 							= Number("0x"+src.@bgColor);			bg.transform.colorTransform = _myColor;			bg.alpha										= src.@bgAlpha / 100;		}						public function configLabel(src:XMLList):void		{						//trace("src.@width = " + src.@width);						txt.width 		= src.@width;			bg.width			= src.@width;			bg.x					= txt.x;			this.x 				= src.@x;			this.y 				= src.@y;					}				public function set font(arg:String):void		{			_format.font = arg;			txt.defaultTextFormat = _format;					}				public function set color(arg:String):void		{			_format.color = Number("0x" + arg);			txt.defaultTextFormat = _format;		}		public function set fontSize(arg:Number):void		{			_format.size = 12;			txt.defaultTextFormat = _format;		}				public function set align(arg:String):void		{			_format.align  = TextFormatAlign[arg.toUpperCase()];			txt.defaultTextFormat = _format;		}				public function set labelWidth(arg:Number):void		{			txt.width = arg;			bg.width = arg;		}				public function set labelHeight(arg:Number):void		{			txt.height = arg;			bg.height = arg;		}				public function set bgAlpha(arg:Number):void		{			bg.alpha = arg;		}				public function set bgColor(src:XMLList):void		{			_myColor.color 							= Number("0x"+src.@bgColor);			bg.transform.colorTransform = _myColor;		}				public function set text(arg:String):void		{			txt.text = decodeURIComponent(arg);		}	}}