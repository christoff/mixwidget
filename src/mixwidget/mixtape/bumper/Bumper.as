/* The contents of this file are subject to the Common Public Attribution * License Version 1.0. (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://mixwidget.com/license. The License is based on the Mozilla Public * License Version 1.1, but Sections 14 and 15 have been added to cover use of * software over a computer network and provide for limited attribution for the * Original Developer. In addition, Exhibit A has been modified to be consistent * with Exhibit B. *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for * the specific language governing rights and limitations under the License. *  * The Original Code is Mixwidget. *  * The Original Developers are Michael Christoff & Radley Marx.  The Initial  * Developers of the Original Code are Michael Christoff & Radley Marx. */package mixwidget.mixtape.bumper{	import fl.transitions.Tween;	import fl.transitions.TweenEvent;	import fl.transitions.easing.*;		import flash.display.MovieClip;	import flash.events.*;	import flash.filters.BitmapFilterQuality;	import flash.filters.GlowFilter;		import mixwidget.mixtape.events.MixtapeEvent;	import mixwidget.util.Util;		//import com.mixwidget.mixtape.EventCenter;	public class Bumper extends MovieClip	{		// instance variables (must be declared public)		public var logo:MovieClip;				// member variables		private var sWidth:Number;		private var sHeight:Number;				private var tweenIn_y:Tween;		private var tweenIn_a:Tween;		private var tweenOut_y:Tween;		private var tweenOut_a:Tween;		private var _glow:GlowFilter;				private var mixtape:Object;				public var okToFadeOut:Boolean = false;				public function Bumper()		{ 			Util.d("Bumper");		}				public function init(obj:Object, sw:Number, sh:Number):void		{			Util.d("Bumper.init()");			sWidth 	= sw;			sHeight = sh;			mixtape		= obj;						this.x = Math.round((sWidth - this.width) / 2);			this.y = Math.round((sHeight - this.height) / 2);			      mixtape.addEventListener(MixtapeEvent.INIT_LOAD_COMPLETE, onShellLoadComplete);						//applyFx();			fadeIn();		}				private function onShellLoadComplete(event:Event):void		{			okToFadeOut = true;			mixtape.removeEventListener(MixtapeEvent.INIT_LOAD_COMPLETE, onShellLoadComplete);		}				private function applyFx():void		{			//Util.d("\rBumper.applyFx()");			this._glow = new GlowFilter(0xFFFFFF, 0.5, 8, 8, 1, BitmapFilterQuality.HIGH);			// this.logo.mixwidget.filters = [this._glow];		}				private function fadeIn():void		{			//Util.d("\rBumper.fadeIn()");			tweenIn_y = new Tween(this, "y", 			Elastic.easeOut, (this.y-100), this.y, 1, true);			tweenIn_a = new Tween(this, "alpha", 	Regular.easeIn, 0, 1, 0.1, true);						tweenIn_y.addEventListener(TweenEvent.MOTION_FINISH, onFadeInFinished); 		}				private function onFadeInFinished(event:Event):void		{			tweenIn_y.removeEventListener(TweenEvent.MOTION_FINISH, onFadeInFinished);			addEventListener(Event.ENTER_FRAME, waitToFadeOut);		}				private function waitToFadeOut(event:Event):void		{			if (okToFadeOut) {				removeEventListener(Event.ENTER_FRAME, waitToFadeOut);				fadeOut();			}		}				public function fadeOut():void		{			Util.d("Bumper.fadeOut()");			tweenOut_y = new Tween(this, "y", 			Back.easeIn, this.y, this.y+100, 0.4, true);			tweenOut_a = new Tween(this, "alpha", 	Regular.easeIn, this.alpha, 0, 0.4, true);						tweenOut_y.addEventListener(TweenEvent.MOTION_FINISH, onFadeOutFinished);		}				private function onFadeOutFinished(event:Event):void		{			Util.d("Bumper.onFadeOutFinished()");			tweenIn_y.removeEventListener(TweenEvent.MOTION_FINISH, onFadeOutFinished);			dispatchEvent(new MixtapeEvent(MixtapeEvent.BUMPER_COMPLETE));		}	}}