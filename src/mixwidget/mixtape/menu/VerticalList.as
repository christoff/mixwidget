/* The contents of this file are subject to the Common Public Attribution * License Version 1.0. (the "License"); you may not use this file except in * compliance with the License. You may obtain a copy of the License at * http://mixwidget.org/license-full. The License is based on the Mozilla Public * License Version 1.1, but Sections 14 and 15 have been added to cover use of * software over a computer network and provide for limited attribution for the * Original Developer. In addition, Exhibit A has been modified to be consistent * with Exhibit B. *  * Software distributed under the License is distributed on an "AS IS" basis, * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for * the specific language governing rights and limitations under the License. *  * The Original Code is Mixwidget.org. *  * The Original Developers are Michael Christoff & Radley Marx.  The Initial  * Developers of the Original Code are Michael Christoff & Radley Marx. */ package mixwidget.mixtape.menu{	  import fl.transitions.Tween;
  import fl.transitions.easing.Regular;
  
  import flash.display.MovieClip;
  import flash.events.MouseEvent;
  
  import mixwidget.mixtape.Global;
  import mixwidget.mixtape.menu.Mask;
  import mixwidget.util.Util;
  import mixwidget.mixtape.menu.GenericScrollbarEvent;
  import mixwidget.mixtape.menu.VerticalScrollbar;      public class VerticalList extends MovieClip    {						public var scrollbar:MovieClip;			public var content:MovieClip;						private var _total:Number;						private const MAX_HEIGHT:Number  = 192; // 235						private var itemHeight:Number;						private var totVisible:Number;						private var tween:Tween; 						private var scrollSpeed:Number = 0.2;			private var arrowScrollSpeed:Number = 10;						private var appleScroller:VerticalScrollbar;						public function VerticalList()			{										super();			}						public function init(value:Number):void			{				itemHeight = value;				totVisible = Math.floor(MAX_HEIGHT / itemHeight);			}						public function get maxHeight():Number			{				return MAX_HEIGHT;			}						public function config(total:Number):void			{								_total = total;								var listMask:MovieClip = new Mask() as MovieClip;					var longList:Boolean;								(_total > totVisible) ? longList = true : longList = false;								if (longList) { listMask.width = 327; }				else					{ listMask.width = 345; };								listMask.height = MAX_HEIGHT; 				listMask.name 	= "listMask";								this.addChildAt(listMask, 1);				content.mask = listMask;								if (_total <= totVisible) { scrollbar.visible = false }								else { initScrollBar() };			}						public function set current(value:Number):void			{								var current:Number = value;				var topVisibleItem:Number = 0 - (content.y / itemHeight);				// check to see if current track is not visible on sreen				if ( ((current-topVisibleItem) > (totVisible - 1)) || (current < topVisibleItem) )				{									// vertical positioning						var tgtItem:Number;												if (current > (_total - (totVisible - 1)))  { tgtItem = _total-(totVisible);}						else if (current <= (totVisible - 1)) 			{ tgtItem = 0; }						else																				{ tgtItem = current; };						var targetY:Number = (0 - (tgtItem * itemHeight));						tweenMenu(targetY);												if (appleScroller != null) {								appleScroller.value = tgtItem;						}				}			}						private function initScrollBar():void			{			  Util.d('stage = ' + Global.stage);				appleScroller = new VerticalScrollbar(Global.stage, scrollbar.track, scrollbar.track_btn);				scrollbar.left_btn.addEventListener(MouseEvent.CLICK, leftClickHandler);				scrollbar.right_btn.addEventListener(MouseEvent.CLICK, rightClickHandler);					scrollbar.track_btn.buttonMode 			= true;				scrollbar.track_btn.mouseChildren 	= true;				scrollbar.track_btn.mouseEnabled 		= true;				scrollbar.track_btn.useHandCursor 	= true;				addChild(scrollbar);				appleScroller.minimum = 0;				appleScroller.maximum = _total-totVisible;				appleScroller.value = 0;				appleScroller.addEventListener(GenericScrollbarEvent.CHANGE, scrollerChanged);					activateScrollbar();				// this.current = WidgetConfig.player.currentTrackNum; // TODO FIX			}						private function activateScrollbar():void			{				// Util.d("scrollbar.track_btn.sliderMid.y = " + scrollbar.track_btn.sliderMid.y);				// Util.d("scrollbar.track_btn.sliderMid.height = " + scrollbar.track_btn.sliderMid.height);								scrollbar.track_btn.sliderMid.height = Math.max(8, ( (scrollbar.track.height - 16) / ((_total-totVisible) * 0.6) ) );				scrollbar.track_btn.sliderRight.y = scrollbar.track_btn.sliderMid.y + scrollbar.track_btn.sliderMid.height - 1;				scrollbar.visible = true;			}						private function stopTween():void			{				if (tween != null) {										if (tween.isPlaying) { tween.stop(); };				}			}						private function leftClickHandler(e:MouseEvent):void			{											if (content.y < 0)				{					var targetY:Number = content.y + itemHeight;					tweenMenu(targetY);										appleScroller.value--;				}			}			private function rightClickHandler(e:MouseEvent):void			{							if (content.y > (0 - ((_total-totVisible)*itemHeight)) ) {										var targetY:Number = content.y - itemHeight;					tweenMenu(targetY);										appleScroller.value++;				}			}										private function scrollerChanged(e:GenericScrollbarEvent):void			{				var targetY:Number = (0 - (e.value * itemHeight));				tweenMenu(targetY);			}						private function tweenMenu(targetY:Number):void			{				stopTween();								var distance:Number = Math.abs(targetY - content.y);								var duration:Number = Math.max(0.2, Math.min(1, (distance/itemHeight)/10 ) );				tween = new Tween(content, "y", Regular.easeOut, content.y, targetY, duration, true);			}	}}